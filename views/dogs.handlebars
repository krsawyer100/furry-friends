    <main class="main">
        <div class="main__location">
            <h4 class="main__location_title">Enter your Location</h4>
            <form class="main__location_form">
                <input type="text" class="main__location_form_input" id="location" name="location" placeholder="Enter your zipcode here">
                <button class="main__location_form_button flex" type="submit">
                    <img src="../images/search-button.png" alt="search" height="20px" class="main__location_form_button-img">
                </button>
            </form>
            <button id="detect-location" class="detect-location-btn">üìç Find pets near me</button>
            <p class="location-help">Uses your current location to suggest nearby pets.</p>
        </div>
        {{#if dogs}}
        <h3 class="cards-title">Available Dogs Near {{cityState}}</h3>
        <div class="cards__container">
            {{#each dogs}}
            <a class="card" id="{{this.id}}" href="/pet/{{this.id}}">
            {{#if isLoggedIn}}
                <form action="/api/favorites/{{this.id}}{{#if this.isFavorite}}?_method=DELETE{{/if}}" method="POST" class="favorite-toggle">
                    {{#if this.isFavorite}}
                    <input type="hidden" name="_method" value="DELETE">
                    <button type="submit" class="favorite-btn">üíî Unfavorite</button>
                    {{else}}
                    <button type="submit" class="favorite-btn">‚ù§Ô∏è Favorite</button>
                    {{/if}}
                </form>
            {{/if}}
                <img src="
                    {{#if this.primary_photo_cropped}}
                        {{this.primary_photo_cropped.full}}
                    {{else}}
                        ../images/placeholder-img.png
                    {{/if}}" 
                    alt="{{this.name}}" width="300" class="card-img">
                    <div class="card-info-container">
                        <h4 class="animal-name">{{this.name}}</h4>
                        <div class="card-info-animal">
                            <p class="card-info">{{this.age}}</p>
                            <span class="info-divider">üêæ</span>
                            <p class="card-info">{{this.gender}}</p>
                        </div>
                        <p class="card-info-location">{{this.distance}} Miles Away</p>
                    </div>
                </a>
            {{/each}}
        </div>

        <div class="pagination">
            <button id="prev-page" {{#if (isEqual currentPage 1)}}disabled{{/if}}>Previous</button>
            <span>Page {{currentPage}} of {{totalPages}}</span>
            <button id="next-page" {{#if (isEqual currentPage totalPages)}}disabled{{/if}}>Next</button>
        </div>

        {{else}}
        <h5>{{error}}</h5>
        {{/if}}
</div>

    </main>

<script>
const form = document.querySelector(".main__location_form")
const detectBtn = document.getElementById("detect-location")
const prevPageBtn = document.getElementById('prev-page')
const nextPageBtn = document.getElementById('next-page')

// ZIP format validation
const checkZipcodeFormat = str => /^\d{5}(-\d{4})?$/.test(str)

// ‚úÖ Prefill ZIP if it's in localStorage
window.addEventListener("DOMContentLoaded", () => {
  const storedZip = localStorage.getItem("zipcode")
  const input = document.getElementById("location")

  if (storedZip && checkZipcodeFormat(storedZip)) {
    // Fill the form field
    if (input) input.value = storedZip

    const currentPath = window.location.pathname
    const isOnDogsRoot = currentPath === "/dogs"

    if (isOnDogsRoot) {
      window.location.href = `/dogs/${storedZip}?page=1`
    }
  }
})

// ‚úÖ Manual ZIP form submission
form.onsubmit = function(e) {
  e.preventDefault()
  const zipcode = form.location.value.trim()

  if (!checkZipcodeFormat(zipcode)) {
    alert("Please enter a valid 5-digit ZIP code.")
    return
  }

  localStorage.setItem("zipcode", zipcode)
  window.location.href = `/dogs/${zipcode}?page=1`
}

// ‚úÖ Geolocation ZIP detection (only when button is clicked)
detectBtn.onclick = async function () {
  if (!("geolocation" in navigator)) {
    alert("Geolocation is not supported in your browser.")
    return
  }

  navigator.geolocation.getCurrentPosition(async position => {
    try {
      const { latitude, longitude } = position.coords
      const res = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`)
      const data = await res.json()
      const zip = data.postcode

      if (zip && checkZipcodeFormat(zip)) {
        localStorage.setItem("zipcode", zip)
        window.location.href = `/dogs/${zip}?page=1`
      } else {
        alert("Couldn't determine a ZIP code from your location.")
      }
    } catch (err) {
      console.error("Error fetching geolocation ZIP:", err)
      alert("Something went wrong with geolocation.")
    }
  }, err => {
    console.warn("Geolocation permission denied.")
    alert("We couldn‚Äôt access your location.")
  })
}

// ‚úÖ Pagination
if (prevPageBtn) {
  prevPageBtn.onclick = () => navigatePage(-1)
}
if (nextPageBtn) {
  nextPageBtn.onclick = () => navigatePage(1)
}

function navigatePage(step) {
  const CURRENT_URL = new URL(window.location.href)
  const currentPage = parseInt(CURRENT_URL.searchParams.get("page")) || 1
  const newPage = currentPage + step
  CURRENT_URL.searchParams.set("page", newPage)
  window.location.href = CURRENT_URL.toString()
}
</script>